/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package coursemanagement.ui;

import coursemanagement.dao.CoursesDoa;
import coursemanagement.javafiles.Courses;
import coursemanagement.dao.imp.CoursesDoaImp;
import coursemanagement.javafiles.Modules;
import coursemanagement.dao.imp.ModulesDoaImp;
import coursemanagement.dao.ModulesDoa;
import coursemanagement.javafiles.Student;
import coursemanagement.dao.StudentDoa;
import coursemanagement.dao.imp.StudentDoaImp;
import coursemanagement.javafiles.Teacher;
import coursemanagement.dao.TeacherDao;
import coursemanagement.dao.imp.TeacherDaoImp;
import coursemanagement.javafiles.User;
import coursemanagement.dao.UserDoa;
import coursemanagement.dao.imp.UserDoaImp;
import java.awt.HeadlessException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author mandipraut
 */
public class DashboardAdmin extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    private User user;
    private String currentType;
    private final UserDoa userDao = new UserDoaImp();
    private final CoursesDoa coursesDao = new CoursesDoaImp();
    private final ModulesDoa modulesDao = new ModulesDoaImp();
    private final StudentDoa studentDao = new StudentDoaImp();
    private final TeacherDao teacherDao = new TeacherDaoImp();



    private final String[] columns = new String[]{"Id", "Name", "Email", "Phone"};
    private final String[] coursesColumns = new String[]{"Course Id", "Courses"};
    private final String[] modulesColumns = new String[]{"Module Id", "Module Name","Level", "Course"};
    private final String[] studentGradeColumns = new String[]{"Student Id", "Student Name", "Course Name","Module Name", "Grade"};
    private final String[] resultColumns = new String[]{"Module Id", "Module Name","Grade","Marks"};



    private final DefaultTableModel model = new DefaultTableModel();
    private final DefaultTableModel modelAdmin = new DefaultTableModel();

    private final DefaultTableModel model1 = new DefaultTableModel();
    private final DefaultTableModel model2 = new DefaultTableModel();
    private final DefaultTableModel model3 = new DefaultTableModel();
    
    //for result table
    private final DefaultTableModel model4 = new DefaultTableModel();
    private final DefaultTableModel model5 = new DefaultTableModel();
    private final DefaultTableModel model6 = new DefaultTableModel();






    
    public DashboardAdmin() throws SQLException, ClassNotFoundException {
        initComponents();
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(homePanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        setUpTableModel();
        setTotal();
//        findAll();

    }
    
    public DashboardAdmin(User user) throws SQLException, ClassNotFoundException {
        initComponents();
        this.user = user;
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(homePanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        setUpTableModel();
        setTotal();
//        upgradeLevel();
        welcomeMessage.setText("Welcome "+this.user.getType());
        if(!this.user.getType().equals("admin")){
            featuresPanel.setVisible(false);
            onlyCoursePanel.setVisible(false);
            onlyModulePanel.setVisible(false);
            resultPanel.setVisible(false);
            resultButton.setVisible(false);
            selectCoursePanel.setVisible(false);
            adminEditPanel.setVisible(false);
        }
        if(!this.user.getType().equals("teacher")){
            gradeButton.setVisible(false);
            
        }
        pickOptional();
        
//        findAll();

    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        selectFeaturesPanel = new javax.swing.JPanel();
        settingButton = new javax.swing.JButton();
        homeButton = new javax.swing.JButton();
        logoutButton = new javax.swing.JButton();
        studentButton = new javax.swing.JButton();
        teacherButton = new javax.swing.JButton();
        courseButton = new javax.swing.JButton();
        gradeButton = new javax.swing.JButton();
        resultButton = new javax.swing.JButton();
        showFeaturesPanel = new javax.swing.JPanel();
        resultPanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        searchForResultTextField = new javax.swing.JTextField();
        generateResultSlipButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        resultShowPanel = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        level4ResultTabel = new javax.swing.JTable();
        jLabel26 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        level5ResultTabel = new javax.swing.JTable();
        jLabel27 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        level6ResultTabel = new javax.swing.JTable();
        jLabel28 = new javax.swing.JLabel();
        finalVerditLevel4 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        finalVerditLevel5 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        finalVerditLevel6 = new javax.swing.JLabel();
        resultName = new javax.swing.JLabel();
        resultId = new javax.swing.JLabel();
        resultEmail = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        resultCourse = new javax.swing.JLabel();
        settingPanel = new javax.swing.JPanel();
        labelForName = new javax.swing.JLabel();
        aboutMeLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        labelForEmail = new javax.swing.JLabel();
        emailLabel = new javax.swing.JLabel();
        labelForPhone = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        labelForCurrentPassword = new javax.swing.JLabel();
        currentPasswordField = new javax.swing.JPasswordField();
        labelForNewPassword = new javax.swing.JLabel();
        newPasswordField = new javax.swing.JPasswordField();
        confirmNewPasswordField = new javax.swing.JPasswordField();
        labelForConfirmNewPassword = new javax.swing.JLabel();
        changePasswordButton = new javax.swing.JButton();
        studentTeacherTitle2 = new javax.swing.JLabel();
        adminEditPanel = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        adminFirstNameTextField = new javax.swing.JTextField();
        adminMiddleNameTextField = new javax.swing.JTextField();
        adminLastNameTextField = new javax.swing.JTextField();
        adminEmailTextField = new javax.swing.JTextField();
        adminPassTextField = new javax.swing.JTextField();
        addAdminButton = new javax.swing.JButton();
        editAdminButton = new javax.swing.JButton();
        deleteAdminButton = new javax.swing.JButton();
        adminTableT = new javax.swing.JScrollPane();
        adminTable = new javax.swing.JTable();
        jLabel49 = new javax.swing.JLabel();
        searchAdminField = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        adminPhoneTextField = new javax.swing.JTextField();
        coursePanel = new javax.swing.JPanel();
        onlyCoursePanel = new javax.swing.JPanel();
        courseTextField = new javax.swing.JTextField();
        addCourseButton = new javax.swing.JButton();
        removeCourseButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        coursesTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        moduleTable = new javax.swing.JTable();
        jLabel13 = new javax.swing.JLabel();
        moduleSearchTextField = new javax.swing.JTextField();
        onlyModulePanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        moduleNameTextField = new javax.swing.JTextField();
        coursesComboBox = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        addModuleButton = new javax.swing.JButton();
        editOrUpdateModuleButton = new javax.swing.JButton();
        deleteModuleButton = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        selectedModuleName = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        assignDeassignTextField = new javax.swing.JTextField();
        assignButton = new javax.swing.JButton();
        deassignButton = new javax.swing.JButton();
        jLabel51 = new javax.swing.JLabel();
        optionalButton = new javax.swing.JToggleButton();
        chooseLevelPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        level4RadioButton = new javax.swing.JRadioButton();
        level5RadioButton = new javax.swing.JRadioButton();
        level6RadioButton = new javax.swing.JRadioButton();
        gradePanel = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        gradeStudentName = new javax.swing.JLabel();
        gradeModuleName = new javax.swing.JLabel();
        gradeModuleId = new javax.swing.JLabel();
        gradeCourseName = new javax.swing.JLabel();
        gradeCourseId = new javax.swing.JLabel();
        gradeTextField = new javax.swing.JTextField();
        editOrAddGradeButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        studentGradeTable = new javax.swing.JTable();
        searchStudentGradeTextField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        studentTeacherTitle1 = new javax.swing.JLabel();
        studentTeacherPanel = new javax.swing.JPanel();
        searchPanel = new javax.swing.JPanel();
        searchField = new javax.swing.JTextField();
        tablePanel = new javax.swing.JScrollPane();
        studentTeacherTable = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        featuresPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        firstNameField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        middleNameField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        lastNameField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        emailField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        phoneField = new javax.swing.JTextField();
        passField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        editOrUpdateButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();
        selectCoursePanel = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        coursesComboBoxStudentTeacher = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        studentTeacherTitle = new javax.swing.JLabel();
        homePanel = new javax.swing.JPanel();
        welcomeMessage = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        totalCourseLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        totalModuleLabel = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        totalTeacherLabel = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        totalStudentsLabel = new javax.swing.JLabel();
        optionalPanel = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        submitOptionalAnswe = new javax.swing.JButton();
        optModuleComboBox = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        selectFeaturesPanel.setBackground(new java.awt.Color(51, 51, 51));
        selectFeaturesPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        settingButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        settingButton.setText("Settings");
        settingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingButtonActionPerformed(evt);
            }
        });

        homeButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        homeButton.setText("Home");
        homeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeButtonActionPerformed(evt);
            }
        });

        logoutButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        logoutButton.setText("Log Out");
        logoutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutButtonActionPerformed(evt);
            }
        });

        studentButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        studentButton.setText("Student");
        studentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentButtonActionPerformed(evt);
            }
        });

        teacherButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        teacherButton.setText("Teacher");
        teacherButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                teacherButtonActionPerformed(evt);
            }
        });

        courseButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        courseButton.setText("Courses");
        courseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                courseButtonActionPerformed(evt);
            }
        });

        gradeButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        gradeButton.setText("Grade");
        gradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeButtonActionPerformed(evt);
            }
        });

        resultButton.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        resultButton.setText("Result");
        resultButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resultButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout selectFeaturesPanelLayout = new javax.swing.GroupLayout(selectFeaturesPanel);
        selectFeaturesPanel.setLayout(selectFeaturesPanelLayout);
        selectFeaturesPanelLayout.setHorizontalGroup(
            selectFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectFeaturesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(selectFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(logoutButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(settingButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(courseButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                    .addComponent(teacherButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(homeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gradeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resultButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        selectFeaturesPanelLayout.setVerticalGroup(
            selectFeaturesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, selectFeaturesPanelLayout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(homeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(studentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(teacherButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(courseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(gradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(settingButton, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(logoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(243, Short.MAX_VALUE))
        );

        getContentPane().add(selectFeaturesPanel, java.awt.BorderLayout.LINE_START);

        showFeaturesPanel.setLayout(new java.awt.CardLayout());

        resultPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel21.setText("Enter the Student's Id you want result of: ");

        generateResultSlipButton.setText("Generate Result Slip");
        generateResultSlipButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateResultSlipButtonActionPerformed(evt);
            }
        });

        resultShowPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel22.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel22.setText("NAME:");

        jLabel23.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel23.setText("ID:");

        jLabel24.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel24.setText("Email:");

        jLabel25.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel25.setText("Level 4:");

        level4ResultTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(level4ResultTabel);

        jLabel26.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel26.setText("Level 5:");

        level5ResultTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(level5ResultTabel);

        jLabel27.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel27.setText("Level 6:");

        level6ResultTabel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(level6ResultTabel);

        jLabel28.setText("Final Verdit:");

        finalVerditLevel4.setText("PASS");

        jLabel30.setText("Final Verdit:");

        finalVerditLevel5.setText("PASS");

        jLabel32.setText("Final Verdit:");

        finalVerditLevel6.setText("PASS");

        resultName.setText("Mandip Raut");

        resultId.setText("12");

        resultEmail.setText("rautmandip717@gmail.com");

        jLabel29.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel29.setText("Couse:");

        resultCourse.setText("BIT");

        javax.swing.GroupLayout resultShowPanelLayout = new javax.swing.GroupLayout(resultShowPanel);
        resultShowPanel.setLayout(resultShowPanelLayout);
        resultShowPanelLayout.setHorizontalGroup(
            resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultShowPanelLayout.createSequentialGroup()
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel27))
                    .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel26)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(resultShowPanelLayout.createSequentialGroup()
                            .addGap(32, 32, 32)
                            .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel25)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(resultShowPanelLayout.createSequentialGroup()
                                    .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel22)
                                        .addComponent(jLabel23)
                                        .addComponent(jLabel24))
                                    .addGap(18, 18, 18)
                                    .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(resultEmail)
                                        .addComponent(resultName)
                                        .addComponent(resultId)))
                                .addGroup(resultShowPanelLayout.createSequentialGroup()
                                    .addComponent(jLabel29)
                                    .addGap(18, 18, 18)
                                    .addComponent(resultCourse))))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, resultShowPanelLayout.createSequentialGroup()
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel28)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(finalVerditLevel4)))
                    .addGroup(resultShowPanelLayout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalVerditLevel5))
                    .addGroup(resultShowPanelLayout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(finalVerditLevel6)))
                .addContainerGap(289, Short.MAX_VALUE))
        );
        resultShowPanelLayout.setVerticalGroup(
            resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultShowPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(resultName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(resultId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(resultEmail))
                .addGap(5, 5, 5)
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(resultCourse))
                .addGap(18, 18, 18)
                .addComponent(jLabel25)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(finalVerditLevel4))
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(finalVerditLevel5))
                .addGap(18, 18, 18)
                .addComponent(jLabel27)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(resultShowPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(finalVerditLevel6))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jScrollPane6.setViewportView(resultShowPanel);

        javax.swing.GroupLayout resultPanelLayout = new javax.swing.GroupLayout(resultPanel);
        resultPanel.setLayout(resultPanelLayout);
        resultPanelLayout.setHorizontalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 528, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generateResultSlipButton)
                    .addGroup(resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchForResultTextField)))
                .addContainerGap(1090, Short.MAX_VALUE))
        );
        resultPanelLayout.setVerticalGroup(
            resultPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(resultPanelLayout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchForResultTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateResultSlipButton)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(345, Short.MAX_VALUE))
        );

        showFeaturesPanel.add(resultPanel, "card7");

        settingPanel.setBackground(new java.awt.Color(255, 255, 255));

        labelForName.setText("NAME:");

        aboutMeLabel.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        aboutMeLabel.setText("ABOUT ME");

        nameLabel.setText("User");

        labelForEmail.setText("EMAIL:");

        emailLabel.setText("User");

        labelForPhone.setText("PHONE:");

        phoneLabel.setText("User");

        passwordLabel.setFont(new java.awt.Font("Helvetica Neue", 3, 13)); // NOI18N
        passwordLabel.setText("PASSWORD:");

        labelForCurrentPassword.setText("Current Password:");

        labelForNewPassword.setText("New Password:");

        newPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPasswordFieldActionPerformed(evt);
            }
        });

        labelForConfirmNewPassword.setText("Confirm New Password:");

        changePasswordButton.setText("Change");
        changePasswordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changePasswordButtonActionPerformed(evt);
            }
        });

        studentTeacherTitle2.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        studentTeacherTitle2.setText("Setting");

        adminEditPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel43.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel43.setText("Admin");

        jLabel44.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel44.setText("FIRST NAME:");

        jLabel45.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel45.setText("MIDDLE NAME:");

        jLabel46.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel46.setText("LAST NAME:");

        jLabel47.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel47.setText("EMAIL:");

        jLabel48.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel48.setText("PASSWORD:");

        adminFirstNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminFirstNameTextFieldActionPerformed(evt);
            }
        });

        addAdminButton.setText("Add");
        addAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAdminButtonActionPerformed(evt);
            }
        });

        editAdminButton.setText("Edit");
        editAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAdminButtonActionPerformed(evt);
            }
        });

        deleteAdminButton.setText("Delete");
        deleteAdminButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAdminButtonActionPerformed(evt);
            }
        });

        adminTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        adminTableT.setViewportView(adminTable);

        jLabel49.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel49.setText("Search:");

        searchAdminField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchAdminFieldKeyReleased(evt);
            }
        });

        jLabel50.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jLabel50.setText("PHONE:");

        adminPhoneTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminPhoneTextFieldActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout adminEditPanelLayout = new javax.swing.GroupLayout(adminEditPanel);
        adminEditPanel.setLayout(adminEditPanelLayout);
        adminEditPanelLayout.setHorizontalGroup(
            adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminEditPanelLayout.createSequentialGroup()
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel44)
                            .addComponent(jLabel45)
                            .addComponent(jLabel46)
                            .addComponent(jLabel47)
                            .addComponent(addAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(adminEditPanelLayout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(adminEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(adminLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(adminMiddleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(adminFirstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(adminEditPanelLayout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(editAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(25, 25, 25)
                                .addComponent(deleteAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel43)
                    .addGroup(adminEditPanelLayout.createSequentialGroup()
                        .addGap(128, 128, 128)
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(adminPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(adminPassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel50)
                    .addComponent(jLabel48))
                .addGap(18, 43, Short.MAX_VALUE)
                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(adminTableT, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(adminEditPanelLayout.createSequentialGroup()
                        .addComponent(jLabel49)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchAdminField, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        adminEditPanelLayout.setVerticalGroup(
            adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminEditPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel43)
                    .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel49)
                        .addComponent(searchAdminField, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(adminEditPanelLayout.createSequentialGroup()
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel44)
                            .addComponent(adminFirstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel45)
                            .addComponent(adminMiddleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel46)
                            .addComponent(adminLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel47)
                            .addComponent(adminEmailTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel50)
                            .addComponent(adminPhoneTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(13, 13, 13)
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel48)
                            .addComponent(adminPassTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(adminEditPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteAdminButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(adminTableT, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(111, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout settingPanelLayout = new javax.swing.GroupLayout(settingPanel);
        settingPanel.setLayout(settingPanelLayout);
        settingPanelLayout.setHorizontalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(studentTeacherTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(settingPanelLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(adminEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(settingPanelLayout.createSequentialGroup()
                                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(changePasswordButton)
                                    .addComponent(passwordLabel)
                                    .addComponent(labelForNewPassword)
                                    .addComponent(labelForCurrentPassword)
                                    .addComponent(labelForConfirmNewPassword)
                                    .addGroup(settingPanelLayout.createSequentialGroup()
                                        .addComponent(labelForPhone)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(phoneLabel))
                                    .addGroup(settingPanelLayout.createSequentialGroup()
                                        .addComponent(labelForEmail)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(emailLabel))
                                    .addComponent(aboutMeLabel)
                                    .addGroup(settingPanelLayout.createSequentialGroup()
                                        .addComponent(labelForName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(nameLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(currentPasswordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(newPasswordField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(confirmNewPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(830, Short.MAX_VALUE))
        );
        settingPanelLayout.setVerticalGroup(
            settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentTeacherTitle2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingPanelLayout.createSequentialGroup()
                        .addGap(164, 164, 164)
                        .addComponent(currentPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(confirmNewPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(settingPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(aboutMeLabel)
                        .addGap(9, 9, 9)
                        .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelForName)
                            .addComponent(nameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelForEmail)
                            .addComponent(emailLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(settingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelForPhone)
                            .addComponent(phoneLabel))
                        .addGap(46, 46, 46)
                        .addComponent(passwordLabel)
                        .addGap(6, 6, 6)
                        .addComponent(labelForCurrentPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelForNewPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelForConfirmNewPassword)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(changePasswordButton)))
                .addGap(18, 18, 18)
                .addComponent(adminEditPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        showFeaturesPanel.add(settingPanel, "card3");

        coursePanel.setBackground(new java.awt.Color(255, 255, 255));

        addCourseButton.setText("Add Course");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });

        removeCourseButton.setText("Remove Course");
        removeCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCourseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout onlyCoursePanelLayout = new javax.swing.GroupLayout(onlyCoursePanel);
        onlyCoursePanel.setLayout(onlyCoursePanelLayout);
        onlyCoursePanelLayout.setHorizontalGroup(
            onlyCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlyCoursePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(onlyCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(courseTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, onlyCoursePanelLayout.createSequentialGroup()
                        .addComponent(addCourseButton)
                        .addGap(18, 18, 18)
                        .addComponent(removeCourseButton)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        onlyCoursePanelLayout.setVerticalGroup(
            onlyCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlyCoursePanelLayout.createSequentialGroup()
                .addComponent(courseTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(onlyCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addCourseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeCourseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel8.setText("Courses");

        coursesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(coursesTable);

        jScrollPane1.setViewportView(jScrollPane2);

        jLabel9.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel9.setText("Modules");

        moduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(moduleTable);

        jLabel13.setText("Search:");

        moduleSearchTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduleSearchTextFieldActionPerformed(evt);
            }
        });
        moduleSearchTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                moduleSearchTextFieldKeyReleased(evt);
            }
        });

        onlyModulePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel10.setText("Module Name:");

        moduleNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduleNameTextFieldActionPerformed(evt);
            }
        });

        coursesComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursesComboBoxActionPerformed(evt);
            }
        });

        jLabel11.setText("Choose Course:");

        addModuleButton.setText("Add");
        addModuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addModuleButtonActionPerformed(evt);
            }
        });

        editOrUpdateModuleButton.setText("Edit");
        editOrUpdateModuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOrUpdateModuleButtonActionPerformed(evt);
            }
        });

        deleteModuleButton.setText("Delete");
        deleteModuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteModuleButtonActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel38.setText("Assign Teacher");

        jLabel40.setText("Selected Module:");

        selectedModuleName.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        selectedModuleName.setText("Module Name");

        jLabel42.setText("Teacher Id:");

        assignButton.setText("Assign");
        assignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignButtonActionPerformed(evt);
            }
        });

        deassignButton.setText("Deassign");
        deassignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deassignButtonActionPerformed(evt);
            }
        });

        jLabel51.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(255, 0, 51));
        jLabel51.setText("*Optional module is only for level 6 and cannot be assigned more than two*");

        optionalButton.setText("Optional");
        optionalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionalButtonActionPerformed(evt);
            }
        });

        chooseLevelPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel12.setText("Choose Level:");

        level4RadioButton.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        level4RadioButton.setText("Level-4");
        level4RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level4RadioButtonActionPerformed(evt);
            }
        });

        level5RadioButton.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        level5RadioButton.setText("Level-5");
        level5RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level5RadioButtonActionPerformed(evt);
            }
        });

        level6RadioButton.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        level6RadioButton.setText("Level-6");
        level6RadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                level6RadioButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout chooseLevelPanelLayout = new javax.swing.GroupLayout(chooseLevelPanel);
        chooseLevelPanel.setLayout(chooseLevelPanelLayout);
        chooseLevelPanelLayout.setHorizontalGroup(
            chooseLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseLevelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(chooseLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addGroup(chooseLevelPanelLayout.createSequentialGroup()
                        .addComponent(level4RadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(level5RadioButton)
                        .addGap(18, 18, 18)
                        .addComponent(level6RadioButton)))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        chooseLevelPanelLayout.setVerticalGroup(
            chooseLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(chooseLevelPanelLayout.createSequentialGroup()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(chooseLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(level4RadioButton)
                    .addComponent(level5RadioButton)
                    .addComponent(level6RadioButton)))
        );

        javax.swing.GroupLayout onlyModulePanelLayout = new javax.swing.GroupLayout(onlyModulePanel);
        onlyModulePanel.setLayout(onlyModulePanelLayout);
        onlyModulePanelLayout.setHorizontalGroup(
            onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlyModulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(moduleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(onlyModulePanelLayout.createSequentialGroup()
                        .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(coursesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optionalButton)
                            .addComponent(jLabel51)))
                    .addComponent(jLabel38)
                    .addGroup(onlyModulePanelLayout.createSequentialGroup()
                        .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel40)
                            .addComponent(jLabel42))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(selectedModuleName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(assignDeassignTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)))
                    .addGroup(onlyModulePanelLayout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(assignButton)
                        .addGap(12, 12, 12)
                        .addComponent(deassignButton))
                    .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(onlyModulePanelLayout.createSequentialGroup()
                            .addComponent(addModuleButton)
                            .addGap(38, 38, 38)
                            .addComponent(editOrUpdateModuleButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteModuleButton))
                        .addComponent(chooseLevelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        onlyModulePanelLayout.setVerticalGroup(
            onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(onlyModulePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(moduleNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel51))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(coursesComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optionalButton))
                .addGap(12, 12, 12)
                .addComponent(chooseLevelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addModuleButton)
                    .addComponent(editOrUpdateModuleButton)
                    .addComponent(deleteModuleButton))
                .addGap(52, 52, 52)
                .addComponent(jLabel38)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel40)
                    .addComponent(selectedModuleName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel42)
                    .addComponent(assignDeassignTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(onlyModulePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(onlyModulePanelLayout.createSequentialGroup()
                        .addComponent(deassignButton)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(onlyModulePanelLayout.createSequentialGroup()
                        .addComponent(assignButton)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout coursePanelLayout = new javax.swing.GroupLayout(coursePanel);
        coursePanel.setLayout(coursePanelLayout);
        coursePanelLayout.setHorizontalGroup(
            coursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coursePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(coursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(coursePanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(coursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onlyCoursePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jLabel9)
                    .addGroup(coursePanelLayout.createSequentialGroup()
                        .addComponent(onlyModulePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(coursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(coursePanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moduleSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(729, Short.MAX_VALUE))
        );
        coursePanelLayout.setVerticalGroup(
            coursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(coursePanelLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(onlyCoursePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel9)
                .addGap(0, 0, 0)
                .addGroup(coursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(coursePanelLayout.createSequentialGroup()
                        .addGroup(coursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(moduleSearchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(onlyModulePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        showFeaturesPanel.add(coursePanel, "card6");

        gradePanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel14.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel14.setText("Name:");

        jLabel15.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel15.setText("Module:");

        jLabel16.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel16.setText("Course:");

        jLabel17.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel17.setText("Module Id:");

        jLabel18.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel18.setText("Course Id:");

        jLabel19.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel19.setText("Grade:");

        gradeStudentName.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        gradeStudentName.setText("Mandip Raut");

        gradeModuleName.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        gradeModuleName.setText("ISA");

        gradeModuleId.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        gradeModuleId.setText("12");

        gradeCourseName.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        gradeCourseName.setText("BIT");

        gradeCourseId.setFont(new java.awt.Font("Helvetica Neue", 0, 15)); // NOI18N
        gradeCourseId.setText("2");

        gradeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gradeTextFieldActionPerformed(evt);
            }
        });

        editOrAddGradeButton.setText("Edit Grade");
        editOrAddGradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOrAddGradeButtonActionPerformed(evt);
            }
        });

        jScrollPane4.setBackground(new java.awt.Color(255, 255, 255));

        studentGradeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(studentGradeTable);

        searchStudentGradeTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchStudentGradeTextFieldActionPerformed(evt);
            }
        });
        searchStudentGradeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchStudentGradeTextFieldKeyReleased(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel20.setText("Search by id:");

        studentTeacherTitle1.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        studentTeacherTitle1.setText("Grade");

        javax.swing.GroupLayout gradePanelLayout = new javax.swing.GroupLayout(gradePanel);
        gradePanel.setLayout(gradePanelLayout);
        gradePanelLayout.setHorizontalGroup(
            gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradePanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentTeacherTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(gradePanelLayout.createSequentialGroup()
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gradePanelLayout.createSequentialGroup()
                                .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jLabel15))
                                .addGap(40, 40, 40)
                                .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradePanelLayout.createSequentialGroup()
                                        .addComponent(gradeModuleName)
                                        .addGap(61, 61, 61))
                                    .addComponent(gradeStudentName)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gradePanelLayout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(49, 49, 49)
                                .addComponent(gradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(gradePanelLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(18, 18, 18)
                                .addComponent(gradeCourseId, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(gradePanelLayout.createSequentialGroup()
                                .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel16))
                                .addGap(18, 18, 18)
                                .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(gradeCourseName)
                                    .addComponent(gradeModuleId)))
                            .addComponent(editOrAddGradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(80, 80, 80)
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(gradePanelLayout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchStudentGradeTextField))
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(800, Short.MAX_VALUE))
        );
        gradePanelLayout.setVerticalGroup(
            gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gradePanelLayout.createSequentialGroup()
                .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(gradePanelLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(searchStudentGradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(gradePanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(studentTeacherTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel14)
                                .addComponent(gradeStudentName))
                            .addComponent(jLabel20))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gradePanelLayout.createSequentialGroup()
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel15)
                            .addComponent(gradeModuleName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel17)
                            .addComponent(gradeModuleId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel16)
                            .addComponent(gradeCourseName))
                        .addGap(13, 13, 13)
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(gradeCourseId, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(gradePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel19)
                            .addComponent(gradeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(editOrAddGradeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(408, Short.MAX_VALUE))
        );

        showFeaturesPanel.add(gradePanel, "card6");

        studentTeacherPanel.setBackground(new java.awt.Color(255, 255, 255));

        searchPanel.setBackground(new java.awt.Color(255, 255, 255));

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchFieldKeyReleased(evt);
            }
        });

        studentTeacherTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablePanel.setViewportView(studentTeacherTable);

        jLabel7.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel7.setText("Search:");

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 646, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85))
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(searchPanelLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(jLabel7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, searchPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 770, Short.MAX_VALUE))
        );

        featuresPanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel1.setText("First Name:");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel2.setText("Middle Name:");

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel3.setText("Last Name:");

        jLabel4.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel4.setText("Email:");

        jLabel5.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel5.setText("Phone:");

        passField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passFieldActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel6.setText("Password:");

        addButton.setText("Add Teacher");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        editOrUpdateButton.setText("Edit Teacher");
        editOrUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editOrUpdateButtonActionPerformed(evt);
            }
        });

        removeButton.setText("Remove Teacher");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabel33.setText("Select course:");

        coursesComboBoxStudentTeacher.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        coursesComboBoxStudentTeacher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursesComboBoxStudentTeacherActionPerformed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Helvetica Neue", 0, 10)); // NOI18N
        jLabel34.setForeground(new java.awt.Color(255, 0, 102));
        jLabel34.setText("*Once assigned, course can not be changed*");

        javax.swing.GroupLayout selectCoursePanelLayout = new javax.swing.GroupLayout(selectCoursePanel);
        selectCoursePanel.setLayout(selectCoursePanelLayout);
        selectCoursePanelLayout.setHorizontalGroup(
            selectCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectCoursePanelLayout.createSequentialGroup()
                .addGroup(selectCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(selectCoursePanelLayout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addGap(101, 101, 101)
                        .addComponent(coursesComboBoxStudentTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel34))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        selectCoursePanelLayout.setVerticalGroup(
            selectCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(selectCoursePanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(selectCoursePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(coursesComboBoxStudentTeacher, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel34))
        );

        javax.swing.GroupLayout featuresPanelLayout = new javax.swing.GroupLayout(featuresPanel);
        featuresPanel.setLayout(featuresPanelLayout);
        featuresPanelLayout.setHorizontalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectCoursePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(featuresPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(featuresPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, featuresPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(middleNameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, featuresPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(featuresPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(editOrUpdateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                        .addComponent(removeButton))
                    .addGroup(featuresPanelLayout.createSequentialGroup()
                        .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        featuresPanelLayout.setVerticalGroup(
            featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(featuresPanelLayout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(firstNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(middleNameField, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lastNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passField, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(selectCoursePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(featuresPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editOrUpdateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88))
        );

        studentTeacherTitle.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        studentTeacherTitle.setText("Student");

        javax.swing.GroupLayout studentTeacherPanelLayout = new javax.swing.GroupLayout(studentTeacherPanel);
        studentTeacherPanel.setLayout(studentTeacherPanelLayout);
        studentTeacherPanelLayout.setHorizontalGroup(
            studentTeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentTeacherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(studentTeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(featuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(studentTeacherTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(580, Short.MAX_VALUE))
        );
        studentTeacherPanelLayout.setVerticalGroup(
            studentTeacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(searchPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(studentTeacherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studentTeacherTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(featuresPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        showFeaturesPanel.add(studentTeacherPanel, "card4");

        homePanel.setBackground(new java.awt.Color(255, 255, 255));

        welcomeMessage.setFont(new java.awt.Font("Helvetica Neue", 1, 24)); // NOI18N
        welcomeMessage.setText("Welcome");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel31.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel31.setText("Total Courses");

        totalCourseLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 48)); // NOI18N
        totalCourseLabel.setText("3");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(totalCourseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel31)
                .addGap(18, 18, 18)
                .addComponent(totalCourseLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        jLabel35.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel35.setText("Total Modules");

        totalModuleLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 48)); // NOI18N
        totalModuleLabel.setText("3");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel35)
                    .addComponent(totalModuleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35)
                .addGap(18, 18, 18)
                .addComponent(totalModuleLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jLabel36.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel36.setText("Total Teachers");

        totalTeacherLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 48)); // NOI18N
        totalTeacherLabel.setText("3");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(totalTeacherLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36)
                .addGap(18, 18, 18)
                .addComponent(totalTeacherLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));

        jLabel37.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        jLabel37.setText("Total Students");

        totalStudentsLabel.setFont(new java.awt.Font("Helvetica Neue", 0, 48)); // NOI18N
        totalStudentsLabel.setText("3");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel37)
                    .addComponent(totalStudentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel37)
                .addGap(18, 18, 18)
                .addComponent(totalStudentsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        optionalPanel.setBackground(new java.awt.Color(204, 204, 204));

        jLabel41.setText("Choose among the optional modules for your level 6: ");

        submitOptionalAnswe.setText("Submit");
        submitOptionalAnswe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitOptionalAnsweActionPerformed(evt);
            }
        });

        optModuleComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout optionalPanelLayout = new javax.swing.GroupLayout(optionalPanel);
        optionalPanel.setLayout(optionalPanelLayout);
        optionalPanelLayout.setHorizontalGroup(
            optionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel41)
                    .addComponent(submitOptionalAnswe)
                    .addComponent(optModuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(371, Short.MAX_VALUE))
        );
        optionalPanelLayout.setVerticalGroup(
            optionalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionalPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel41)
                .addGap(18, 18, 18)
                .addComponent(optModuleComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(submitOptionalAnswe)
                .addContainerGap(98, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(optionalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(welcomeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(702, Short.MAX_VALUE))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(welcomeMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(optionalPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(375, Short.MAX_VALUE))
        );

        showFeaturesPanel.add(homePanel, "card2");

        getContentPane().add(showFeaturesPanel, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void changePass() throws NumberFormatException{
        if(user.getPassword().equals(currentPasswordField.getText())){
            if(newPasswordField.getText().equals(confirmNewPasswordField.getText())){
                try{
                    user.setPassword(newPasswordField.getText());
                    int rowCount = userDao.update(user, user.getId());
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,"Updated.");
                        currentPasswordField.setText("");
                        newPasswordField.setText("");
                        confirmNewPasswordField.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null,"Something went wrong");
                    }
                }catch (SQLException | ClassNotFoundException ex) {
                    JOptionPane.showMessageDialog(null,ex);
                }
            }
        }  
    }
    
    private void updateOptional() throws SQLException, ClassNotFoundException{
        String selectedOptionalModule = (String) optModuleComboBox.getSelectedItem();
        if(selectedOptionalModule.equals("None")){
            userDao.updateLevel(7, this.user.getId());
            
        }else if(selectedOptionalModule.equals("All")){
            Student student = studentDao.findOne(this.user.getId());
            List<Modules> modules = modulesDao.findOptional(student.getCourseId());
            if(modules!=null){
                for(Modules module: modules){
                    Student updateStu = new Student(student.getStudentId(),module.getModuleId(),0, null, student.getCourseId());
                    studentDao.save(updateStu);
                }
                userDao.updateLevel(7, this.user.getId()); 
            }
        }else{
            Student student = studentDao.findOne(this.user.getId());
            Modules module = modulesDao.findOne(selectedOptionalModule);
            if(module!=null){
                Student updateStu = new Student(student.getStudentId(),module.getModuleId(),0, null, student.getCourseId());
                studentDao.save(updateStu);
                userDao.updateLevel(7, this.user.getId());
            }
        }
        optionalPanel.setVisible(false);
    }
    
    private User getValueFromTextField() throws NumberFormatException {
        String fName = firstNameField.getText();
        String mName = middleNameField.getText();
        String lName = lastNameField.getText();
        String email = emailField.getText();
        String phone = phoneField.getText();
        String password = passField.getText();
        String type = currentType;
        User use = new User(fName, mName, lName, email, password, phone, type, 0);
        return use;
    }
    
    private Modules getValueFromModuleTextField() throws NumberFormatException {
        String moduleName = moduleNameTextField.getText();
        String courseName = (String) coursesComboBox.getSelectedItem();
        List<Integer> levels = new ArrayList<>();

        if (level4RadioButton.isSelected()) {
            levels.add(4);
        }
        if (level5RadioButton.isSelected()) {
            levels.add(5); 
        }
        if (level6RadioButton.isSelected()) {
            levels.add(6);
        }

        Modules module = new Modules(moduleName, levels, 0, courseName);
        return module;
    }
    
    
    private void addToStudentTeacherTable() throws SQLException, ClassNotFoundException{
        User use = getValueFromTextField();
        User findUser = userDao.findOne(use.getEmail(), use.getPhone());
        String selectedCourse = (String) coursesComboBoxStudentTeacher.getSelectedItem();
        
        if(use.getType().equals("student")){
            Courses course = coursesDao.findOne(selectedCourse);
            List<Modules> modules = modulesDao.findAll(course.getCourseId());
            for(Modules module: modules){
                Student student = new Student(findUser.getId(), module.getModuleId(), 0, null, module.getCId());
                int rowCount = studentDao.save(student);
                
            }
        }
    }
    
    private void pickOptional() throws SQLException, ClassNotFoundException{
        if(this.user.getType().equals("student") && this.user.getCurrentLevel()==6){
            optionalPanel.setVisible(true);
            updateOptionalModule();
        }else{
            optionalPanel.setVisible(false);
        }
    }
    
    private void updateOptionalModule() throws SQLException, ClassNotFoundException{

        optModuleComboBox.removeAllItems();
        Student student = studentDao.findOne(this.user.getId());
        List<Modules> modules = modulesDao.findOptional(student.getCourseId());
        if (!modules.isEmpty()){
            for(Modules module: modules){
                optModuleComboBox.addItem(module.getModuleName());
            }
            optModuleComboBox.addItem("All");
            optModuleComboBox.addItem("None");
        }else{
            optionalPanel.setVisible(false);
        }
        
    }
    
    private void save() throws NumberFormatException, HeadlessException {
        if(this.user.getType().equals("admin")){
            try {
                User use = getValueFromTextField();
                User findUser = userDao.findOne(use.getEmail(), use.getPhone());
                if(findUser==null){
                    int rowCount = userDao.save(use);
                    addToStudentTeacherTable();
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,"Added.");
                        resetForm();
                        findAll();
                    } else {
                        JOptionPane.showMessageDialog(null,"Not added.");
                    }
                }else{
                    JOptionPane.showMessageDialog(null,"Email or phone already exist.");
                }
            } catch (SQLException | ClassNotFoundException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void addAdmin() throws SQLException, ClassNotFoundException{
        if(this.user.getType().equals("admin")){
            User use = getValueFromAdminTextField();
            User findUser = userDao.findOne(use.getEmail(), use.getPhone());
            if(findUser==null){
                    int rowCount = userDao.save(use);
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,"Admin Added.");
                        resetAdminForm();
                        findAllAdmin();
                    } else {
                        JOptionPane.showMessageDialog(null,"Admin Not added.");
                    }
                }else{
                    JOptionPane.showMessageDialog(null,"Email or phone already exist.");
                }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void updateAdmin() throws NumberFormatException {
        if(this.user.getType().equals("admin")){
            try {
                int selectedRow = adminTable.getSelectedRow();
                int id = (int) adminTable.getValueAt(selectedRow, 0);
                User cUser = userDao.findOne(id);
                if (editAdminButton.getText().equals("Edit")) {
                    editAdminButton.setText("Update");
                    adminFirstNameTextField.setText(cUser.getFname());
                    adminMiddleNameTextField.setText(cUser.getMname());
                    adminLastNameTextField.setText(cUser.getLname());
                    adminEmailTextField.setText(cUser.getEmail());
                    adminPassTextField.setText(cUser.getPassword());
                    adminPhoneTextField.setText(cUser.getPhone());
                } else if (editAdminButton.getText().equals("Update")) {
                    cUser.setFname(adminFirstNameTextField.getText());
                    cUser.setMname(adminMiddleNameTextField.getText());
                    cUser.setLname(adminLastNameTextField.getText());
                    cUser.setEmail(adminEmailTextField.getText());
                    cUser.setPhone(adminPhoneTextField.getText());
                    cUser.setPassword(adminPassTextField.getText());
                    int rowCount = userDao.update(cUser, id);
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null, "Admin sucessfully updated");
                        resetAdminForm();
                        findAllAdmin();
                        editAdminButton.setText("Edit");
                        
                        
                        
                    } else { 
                        JOptionPane.showMessageDialog(null,"Something went wrong");

                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);

            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    private void resetAdminForm(){
        adminFirstNameTextField.setText("");
        adminMiddleNameTextField.setText("");
        adminLastNameTextField.setText("");
        adminEmailTextField.setText("");
        adminPassTextField.setText("");
        adminPhoneTextField.setText("");
    }
    private User getValueFromAdminTextField() throws NumberFormatException {
        String fName = adminFirstNameTextField.getText();
        String mName = adminMiddleNameTextField.getText();
        String lName = adminLastNameTextField.getText();
        String email = adminEmailTextField.getText();
        String phone = adminPhoneTextField.getText();
        String password = adminPassTextField.getText();
        User use = new User(fName, mName, lName, email, password, phone, "admin", 0);
        return use;
    }
    
    private void saveModule() throws NumberFormatException, HeadlessException {
        if(this.user.getType().equals("admin")){
            try {
                Modules module = getValueFromModuleTextField();
                Modules findModule = modulesDao.findOne(module.getModuleName());
                if(findModule==null){
                    if(optionalButton.isSelected()==false){
                        int rowCount = modulesDao.save(module);
                        if (rowCount >= 1) {
                            JOptionPane.showMessageDialog(null,"Module Added.");
                            resetModuleForm();
                            findAllModules();
                        } else {
                            JOptionPane.showMessageDialog(null,"Module Not added.");
                        }
                    }else{
                        Courses course = coursesDao.findOne((String) coursesComboBox.getSelectedItem());
                        List<Modules> modules = modulesDao.findOptional(course.getCourseId());
                        if(modules.size()>=2){
                            JOptionPane.showMessageDialog(null,"Optional Module couldnot be added as there are already two optional modules.");
                        }else{
                            int rowCount = modulesDao.saveOptional(module);
                            if (rowCount >= 1) {
                                JOptionPane.showMessageDialog(null,"Optional Module Added.");
                                optionalButton.setSelected(false);
                                resetModuleForm();
                                findAllModules();
                            } else {
                                JOptionPane.showMessageDialog(null,"Optional Module Not added.");
                                optionalButton.setSelected(false);
                            }
                        }
                    }
                }else{
                    JOptionPane.showMessageDialog(null,"Module already exist.");
                }
            } catch (SQLException | ClassNotFoundException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    
    
    private void searchModule() {
        String query = moduleSearchTextField.getText();
        if (query.length() == 0) {
            findAllModules();
        } else {
            model2.setRowCount(0);
            try {
                List<Modules> modules = modulesDao.search(moduleSearchTextField.getText());
                if(modules!=null){
                    for (Modules module : modules) {
                        List<Integer> level = module.getLevel();
                        if(level!=null){
                            Courses course = coursesDao.findOne(module.getCId());
                            if(course!=null){
                                Object[] row = {module.getModuleId(), module.getModuleName(), level.get(0), course.getCourseName()};
                                model2.addRow(row);
                            }
                        }
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }
    }
    
    private void searchGrade() throws SQLException {
        String query = searchStudentGradeTextField.getText();
        int id = user.getId();
        if (query.length() == 0) {
            findAllGrade();
        } else {
            model3.setRowCount(0);
            try {
                List<Teacher> teachers = teacherDao.findAllModules(id); 
                if(teachers!=null){
                    for (Teacher teacher : teachers) {

                        List<Student> students = studentDao.search(searchStudentGradeTextField.getText(), teacher.getModuleId());
                        if (students!=null){
                            for (Student student : students){
                                User userData = userDao.findOne(student.getStudentId());
                                if(userData!=null){
                                    Modules module = modulesDao.findOne(student.getModuleId());
                                    if(module!=null){
                                        Courses course = coursesDao.findOne(module.getCId());
                                        if(course!=null){
                                            Object[] row = {userData.getId(), userData.getFullName(), course.getCourseName(), module.getModuleName(), student.getMarks()};
                                            model3.addRow(row);
                                        }
                                    }
                                }
                            } 
                        }
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }
    }
    
    private void setTotal() throws SQLException, ClassNotFoundException{
        List<User> totStu = userDao.findAll("student");
        totalStudentsLabel.setText(String.valueOf(totStu.size()));
        
        List<User> totTeach = userDao.findAll("teacher");
        totalTeacherLabel.setText(String.valueOf(totTeach.size()));
        
        List<Modules> totMod = modulesDao.findAll();
        totalModuleLabel.setText(String.valueOf(totMod.size()));
        
        List<Courses> totCou = coursesDao.findAll();
        totalCourseLabel.setText(String.valueOf(totCou.size()));
    }
    
    private void findAllGrade() throws SQLException {
        model3.setRowCount(0);
        int id = user.getId();
        
        try {
            List<Teacher> teachers = teacherDao.findAllModules(id);
            if(teachers!=null){
                for (Teacher teacher : teachers) {
                    List<Student> students = studentDao.findAll(teacher.getModuleId());
                    if(students!=null){
                        for (Student student : students){
                            if(student!=null){
                                User userData = userDao.findOne(student.getStudentId());
                                if(userData!=null){
                                    Modules module = modulesDao.findOne(student.getModuleId());
                                    if(module!=null){
                                        Courses course = coursesDao.findOne(module.getCId()); 
                                        if(course!=null){
                                            Object[] row = {userData.getId(), userData.getFullName(), course.getCourseName(), module.getModuleName(), student.getMarks()};
                                            model3.addRow(row);
                                        }
                                    }
                                }
                            }
                        }  
                    }
                }
            }

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,ex);

        }
    }
    
//    private void upgradeLevel() throws SQLException, ClassNotFoundException{
//        List<Student> students = studentDao.findAll();
//        for(Student student: students){
//            List<Modules> modules = modulesDao.findAll(student.getCourseId(), 4);
//            int nullCount = 0;
//            for(Modules module: modules){
//                Student eachStudent = studentDao.findOne(student.getStudentId(), module.getModuleId());
//                if(eachStudent!=null && eachStudent.getGrade()==null){
//                    nullCount++;
//                }
//            }
//            List<Modules> modulesLevelFive = modulesDao.findAll(student.getCourseId(), 5);
//            
//            for(Modules module: modulesLevelFive){
//                Student eachStudent = studentDao.findOne(student.getStudentId(), module.getModuleId());
//                if(eachStudent==null && nullCount==0){
////                    (int studentId, int moduleId, int marks, String grade, int courseId){
//                    Student studentLevelFive = new Student(student.getStudentId(), module.getModuleId(), 0, null, module.getCId());
//                    int rowCount = studentDao.save(studentLevelFive);
//                    if (rowCount >= 1) {
//                            System.out.println("Yess");
//                        } else {
//                            System.out.println("No");
//                    }
//                }
//            }
//            
//            
//        }
//    }
    
    private void findAllModules() {
        model2.setRowCount(0);
        try {
            List<Modules> modules = modulesDao.findAll();
            for (Modules module : modules) {
                List<Integer> level = module.getLevel();
                Courses course = coursesDao.findOne(module.getCId());
                if(course!=null){
                    Object[] row = {module.getModuleId(), module.getModuleName(), level.get(0), course.getCourseName()};
                    model2.addRow(row);
                }
                
            }

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,ex);
        }
    }
    
    private void showResult() throws SQLException, ClassNotFoundException{
        if(this.user.getType().equals("admin")){
           model4.setRowCount(0);
           model5.setRowCount(0);
           model6.setRowCount(0);

           int searchedId = Integer.parseInt(searchForResultTextField.getText());
           Student student = studentDao.findOne(searchedId);
           if(student!=null){
               String showResultGrade;
               String showMarks;
               User resultUserData = userDao.findOne(student.getStudentId());
               Courses course = coursesDao.findOne(student.getCourseId());
               if(course !=null){
                resultName.setText(resultUserData.getFullName());
                resultId.setText(String.valueOf(student.getStudentId()));
                resultEmail.setText(resultUserData.getEmail());
                resultCourse.setText(course.getCourseName());
               }
               
               int totalModuleCount = 0, passedModuleCount = 0;
               List<Modules> modules = modulesDao.findAll(student.getCourseId(), 4);
               if(modules!=null){
                    for(Modules module : modules){
                        totalModuleCount++;
                        Student studentForCurrentLevel = studentDao.findOne(searchedId, module.getModuleId());
     //                   {"Module Id", "Module Name","Grade"};
                        if(studentForCurrentLevel!=null){
                            if(studentForCurrentLevel.getGrade()==null){
                                showResultGrade = "null";
                                showMarks = "null";
                            }else{
                                showResultGrade = studentForCurrentLevel.getGrade();
                                showMarks = String.valueOf(studentForCurrentLevel.getMarks());
                                if(studentForCurrentLevel.getMarks()>=40){
                                    passedModuleCount++;
                                }
                            }

                            Object[] row = {module.getModuleId(), module.getModuleName(), showResultGrade, showMarks};
                            model4.addRow(row);
                        }
                    }
               }
               if(passedModuleCount>=totalModuleCount/2){
                   finalVerditLevel4.setText("PASS");
                   
                   userDao.updateLevel(5, searchedId);
               }else{
                   finalVerditLevel4.setText("FAIL");
               }
               totalModuleCount = 0; 
               passedModuleCount = 0;
               
              
               List<Modules> modules5 = modulesDao.findAll(student.getCourseId(), 5);
               if(modules5!=null){
               for(Modules module : modules5){
                   totalModuleCount++;
                   Student studentForCurrentLevel = studentDao.findOne(searchedId, module.getModuleId());
//                   {"Module Id", "Module Name","Grade"};
                    if(studentForCurrentLevel==null){
                        showResultGrade = "null";
                        showMarks = "null";
                    }else{
                        showResultGrade = studentForCurrentLevel.getGrade();
                        showMarks = String.valueOf(studentForCurrentLevel.getMarks());
                        if(studentForCurrentLevel.getMarks()>=40){
                            passedModuleCount++;
                        }
                    }
                    
                    Object[] row = {module.getModuleId(), module.getModuleName(), showResultGrade, showMarks};
                    model5.addRow(row);
               }
               }
               if(totalModuleCount>1 && passedModuleCount>=totalModuleCount/2){
                   finalVerditLevel5.setText("PASS");
                   userDao.updateLevel(6, searchedId);
               }else if(totalModuleCount==1){
                   if(passedModuleCount==1){
                       finalVerditLevel5.setText("PASS");
                       userDao.updateLevel(6, searchedId);
                   }else{
                       finalVerditLevel5.setText("FAIL");
                   }
               }else{
                   finalVerditLevel5.setText("FAIL");
                   
                   
               }
               totalModuleCount = 0; 
               passedModuleCount = 0;
               
               List<Modules> modules6 = modulesDao.findAll(student.getCourseId(), 6);
               if(modules6!=null){
                for(Modules module : modules6){
                    totalModuleCount++;
                    Student studentForCurrentLevel = studentDao.findOne(searchedId, module.getModuleId());
 //                   {"Module Id", "Module Name","Grade"};
                     if(studentForCurrentLevel==null){
                         showResultGrade = "null";
                         showMarks = "null";
                     }else{
                         showResultGrade = studentForCurrentLevel.getGrade();
                         showMarks = String.valueOf(studentForCurrentLevel.getMarks());
                         if(studentForCurrentLevel.getMarks()>=40){
                             passedModuleCount++;
                         }
                     }

                     Object[] row = {module.getModuleId(), module.getModuleName(), showResultGrade, showMarks};
                     model6.addRow(row);
                }
               }
               if(passedModuleCount>=totalModuleCount/2){
                   finalVerditLevel6.setText("PASS");
               }else{
                   finalVerditLevel6.setText("FAIL");
               }
               
               
           }else{
               JOptionPane.showMessageDialog(null,"Sorry!! No student of such id exist.");
           }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    
    private void saveCourse() throws NumberFormatException, HeadlessException {
        if(this.user.getType().equals("admin")){
            try {
                Courses course = new Courses(courseTextField.getText(), 0);
                Courses findCourses = coursesDao.findOne(course.getCourseName());
                if(findCourses==null){
                    int rowCount = coursesDao.save(course);
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,"Course added.");
                        courseTextField.setText("");
                        findAllCourses();
                        updateCoursesComboBox();
                    } else {
                        JOptionPane.showMessageDialog(null,"Not added.");
                    }
                }else{
                    JOptionPane.showMessageDialog(null,"Course already exist.");
                }
            } catch (SQLException | ClassNotFoundException | NumberFormatException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    
    
    private void findAll() {
        model.setRowCount(0);
        try {
            List<User> users = userDao.findAll(currentType);
            if(users!=null){
                for (User cUser : users) {
                    Object[] row = {cUser.getId(), cUser.getFullName(), cUser.getEmail(), cUser.getPhone()};
                    model.addRow(row);
                }
            }

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,ex);

        }
    }
    private void findAllAdmin() {
        modelAdmin.setRowCount(0);
        try {
            List<User> users = userDao.findAll("admin");
            if(users!=null){
                for (User cUser : users) {
                    Object[] row = {cUser.getId(), cUser.getFullName(), cUser.getEmail(), cUser.getPhone()};
                    modelAdmin.addRow(row);
                }
            }

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,ex);

        }
    }
    private void findAllCourses() {
        model1.setRowCount(0);
        try {
            List<Courses> courses = coursesDao.findAll();
            for (Courses course : courses) {
                Object[] row = {course.getCourseId(), course.getCourseName()};
                model1.addRow(row);
            }

        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,ex);

        }
    }
    
    
    private void update() throws NumberFormatException {
        if(this.user.getType().equals("admin")){
            try {
                int selectedRow = studentTeacherTable.getSelectedRow();
                int id = (int) studentTeacherTable.getValueAt(selectedRow, 0);
                User cUser = userDao.findOne(id);
                if (editOrUpdateButton.getText().equals("Edit "+currentType)) {
                    editOrUpdateButton.setText("Update "+currentType);
                    firstNameField.setText(cUser.getFname());
                    middleNameField.setText(cUser.getMname());
                    lastNameField.setText(cUser.getLname());
                    emailField.setText(cUser.getEmail());
                    phoneField.setText(cUser.getPhone());
                    passField.setText(cUser.getPassword());
                    
                    //course cannot be changed once assigned as the student could already be graded.
                    selectCoursePanel.setVisible(false);
                } else if (editOrUpdateButton.getText().equals("Update "+currentType)) {
                    cUser.setFname(firstNameField.getText());
                    cUser.setMname(middleNameField.getText());
                    cUser.setLname(lastNameField.getText());
                    cUser.setEmail(emailField.getText());
                    cUser.setPhone(phoneField.getText());
                    cUser.setPassword(passField.getText());
                    int rowCount = userDao.update(cUser, id);
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,currentType + " sucessfully updated");
                        resetForm();
                        findAll();
                        editOrUpdateButton.setText("Edit "+currentType);
                        selectCoursePanel.setVisible(true);
                    } else { 
                        JOptionPane.showMessageDialog(null,"Something went wrong");

                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);

            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void updateGrade() throws NumberFormatException {
        if(this.user.getType().equals("teacher")){
            try {
//                {"Student Id", "Student Name", "Course Name","Module Name", "Grade"};
                int selectedRow = studentGradeTable.getSelectedRow();
                int id = (int) studentGradeTable.getValueAt(selectedRow, 0);
                String moduleName = (String) studentGradeTable.getValueAt(selectedRow, 3);
                User userData = userDao.findOne(id);
                Modules module = modulesDao.findOne(moduleName); 
                Student student = studentDao.findOne(id, module.getModuleId());
                int moduleId = student.getModuleId();
                
                Modules moduleano = modulesDao.findOne(student.getModuleId());
                Courses course = coursesDao.findOne(moduleano.getCId());
                if (editOrAddGradeButton.getText().equals("Edit Grade")) {
                    
                    editOrAddGradeButton.setText("Add Grade");
                    gradeStudentName.setText(userData.getFullName());
                    gradeTextField.setText(String.valueOf(student.getMarks()));
                    gradeModuleName.setText(module.getModuleName());
                    gradeCourseName.setText(course.getCourseName());
                    gradeModuleId.setText(String.valueOf(student.getModuleId()));
                    gradeCourseId.setText(String.valueOf(moduleano.getCId()));
                    
                } else if (editOrAddGradeButton.getText().equals("Add Grade")) {
                    student.setMarks(Integer.parseInt(gradeTextField.getText()));
                    int marks = Integer.parseInt(gradeTextField.getText());

                    if (marks>=0 && marks<=100){
                        String grade = null;
                        if (marks >= 80) {
                            grade = "A";
                        } else if (marks >= 60) {
                            grade = "B";
                        } else if (marks >= 40) {
                            grade = "C";
                        } else if (marks >= 20) {
                            grade = "D";
                        } else if (marks >= 0) {
                            grade = "E";
                        }
                        System.out.println(grade);
                        student.setGrade(grade);
                        student.setModuleId(moduleId);
                        
                        int rowCount = studentDao.update(student, id, moduleId);
                        if (rowCount >= 1) {
                            JOptionPane.showMessageDialog(null," Grade sucessfully updated");
                            resetGradeForm();
                            findAllGrade();
                            editOrAddGradeButton.setText("Edit Grade");
                        } else { 
                            JOptionPane.showMessageDialog(null,"Something went wrong");

                        }
                    }else{
                        JOptionPane.showMessageDialog(null,"Enter valid marks.");
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);

            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void resetGradeForm(){
        gradeStudentName.setText("");
        gradeModuleName.setText("");
        gradeModuleId.setText("");
        gradeCourseName.setText("");
        gradeCourseId.setText("");
        gradeTextField.setText("");
    }
    
    private void remove() {
        if(this.user.getType().equals("admin")){
            int selectedRow = studentTeacherTable.getSelectedRow();
            int id = (int) studentTeacherTable.getValueAt(selectedRow, 0);
            try {
                User cUser = userDao.findOne(id);
                if (cUser != null) {
                    int rowCount = userDao.remove(id, currentType);
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null, currentType+" sucessfully deleted");
                        findAll();
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void removeAdmin() {
        if(this.user.getType().equals("admin")){
            int selectedRow = adminTable.getSelectedRow();
            int id = (int) adminTable.getValueAt(selectedRow, 0);
            try {
                User cUser = userDao.findOne(id);
                if (cUser != null) {
                    int rowCount = userDao.remove(id, "admin");
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,"Admin sucessfully deleted");
                        findAllAdmin();
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void removeCourse() {
        if(this.user.getType().equals("admin")){
            int selectedRow = coursesTable.getSelectedRow();
            int id = (int) coursesTable.getValueAt(selectedRow, 0);
            try {
                Courses course = coursesDao.findOne(id);
                if (course != null) {
                    int rowCount = coursesDao.remove(id);
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,"Course sucessfully deleted");
                        findAllCourses();
                        findAllModules();
                        updateCoursesComboBox();

                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void removeModule() {
        if(this.user.getType().equals("admin")){
            int selectedRow = moduleTable.getSelectedRow();
            int id = (int) moduleTable.getValueAt(selectedRow, 0);
            try {
                Modules module = modulesDao.findOne(id);
                if (module != null) {
                    int rowCount = modulesDao.remove(id);
                    if (rowCount >= 1) {
                        JOptionPane.showMessageDialog(null,"Module sucessfully deleted");
                        findAllModules();
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void assignModule() throws SQLException, ClassNotFoundException{
        if(this.user.getType().equals("admin")){
            int selectedRow = moduleTable.getSelectedRow();
            int id = (int) moduleTable.getValueAt(selectedRow, 0);
            Modules module = modulesDao.findOne(id);
            selectedModuleName.setText(module.getModuleName());
            if (assignButton.getText().equals("Assign")) {
                assignButton.setText("Confirm Assign");
            }else if (assignButton.getText().equals("Confirm Assign")) {
                int teacherId = Integer.parseInt(assignDeassignTextField.getText());
                User use = userDao.findOne(teacherId);
                if(use!=null){
                    Teacher teacher = teacherDao.findOne(teacherId, id);
                    if(teacher==null){
                        Teacher addTeacher = new Teacher(teacherId,id);
                        int rowCount = teacherDao.save(addTeacher);
                        if (rowCount >= 1) {
                            JOptionPane.showMessageDialog(null,"Teacher Successfully assigned.");
                            assignDeassignTextField.setText("");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null,"Teacher already assigned to the module.");
                    }
                }else{
                     JOptionPane.showMessageDialog(null,"Teacher of such ID doesnt exist.");
                }
                assignButton.setText("Assign");
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void deassignModule() throws SQLException, ClassNotFoundException{
        if(this.user.getType().equals("admin")){
            int selectedRow = moduleTable.getSelectedRow();
            int id = (int) moduleTable.getValueAt(selectedRow, 0);
            Modules module = modulesDao.findOne(id);
            selectedModuleName.setText(module.getModuleName());
            if (deassignButton.getText().equals("Deassign")) {
                deassignButton.setText("Confirm Deassign");
            }else if (deassignButton.getText().equals("Confirm Deassign")) {
                int teacherId = Integer.parseInt(assignDeassignTextField.getText());
                User use = userDao.findOne(teacherId);
                if(use!=null){
                    Teacher teacher = teacherDao.findOne(teacherId, id);
                    if(teacher!=null){
                        int rowCount = teacherDao.remove(teacherId, id);
                        if (rowCount >= 1) {
                            JOptionPane.showMessageDialog(null,"Teacher Successfully deassigned.");
                            assignDeassignTextField.setText("");
                        }
                    }else{
                        JOptionPane.showMessageDialog(null,"Teacher is not assigned to the module yet.");
                    }
                }else{
                     JOptionPane.showMessageDialog(null,"Teacher of such ID doesnt exist.");
                }
                assignButton.setText("Deassign");
            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void updateModule() throws NumberFormatException, SQLException, ClassNotFoundException {
        if(this.user.getType().equals("admin")){
            try {
                int selectedRow = moduleTable.getSelectedRow();
                int id = (int) moduleTable.getValueAt(selectedRow, 0);
                Modules module = modulesDao.findOne(id);
                if(module!=null){
                if (editOrUpdateModuleButton.getText().equals("Edit")) {
                    level4RadioButton.setSelected(false);
                    level5RadioButton.setSelected(false);
                    level6RadioButton.setSelected(false);
                    editOrUpdateModuleButton.setText("Update");
                    Courses course = coursesDao.findOne(module.getCId());
                    if(course!=null){
                    List<Integer> level = module.getLevel();
                    moduleNameTextField.setText(module.getModuleName());
                    coursesComboBox.setSelectedItem(course.getCourseName());
                    switch (level.get(0)) {
                        case 4 -> level4RadioButton.setSelected(true);
                        case 5 -> level5RadioButton.setSelected(true);
                        case 6 -> level6RadioButton.setSelected(true);
                        default -> {
                            level4RadioButton.setSelected(false);
                            level5RadioButton.setSelected(false);
                            level6RadioButton.setSelected(false);

                        }
                    }  
                    }
                }else if (editOrUpdateModuleButton.getText().equals("Update")) {
                    module.setModuleName(moduleNameTextField.getText());
                    Courses course = coursesDao.findOne((String)coursesComboBox.getSelectedItem());
                    if(course!=null){
                        module.setCId(course.getCourseId());
                    }
                    List<Integer> level = new ArrayList<>();
                    int selected = 0;
                    if(level4RadioButton.isSelected()==true){
                        level.add(4);
                        selected++;   
                    }
                    if(level5RadioButton.isSelected()==true){
                        level.add(5);
                        selected++;
                    }
                    if(level6RadioButton.isSelected()==true){
                        level.add(6);
                        selected++;
                    }
                    if(selected==1){
                        System.out.println(selected);
                        module.setLevel(level);
                        int rowCount = modulesDao.update(module, id);
                        if (rowCount >= 1) {
                            JOptionPane.showMessageDialog(null,"Module sucessfully updated");
                            resetModuleForm();
                            findAllModules();
                            editOrUpdateModuleButton.setText("Edit");
                        } else { 
                            JOptionPane.showMessageDialog(null,"Something went wrong");

                        }
                    }else{
                        JOptionPane.showMessageDialog(null,"Select only one level.");
                    }
                }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);

            }
        }else{
            JOptionPane.showMessageDialog(null,"Sorry!! Only admin can access this feature.");
        }
    }
    
    private void search() {
        String query = searchField.getText();
        if (query.length() == 0) {
            findAll();
        } else {
            model.setRowCount(0);
            try {
                List<User> users = userDao.search(searchField.getText(),currentType);
                if(users!=null){
                    for (User cUser : users) {
                        Object[] row = {cUser.getId(), cUser.getFullName(), cUser.getEmail(), cUser.getPhone()};
                        model.addRow(row);
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }
    }
    
    private void searchAdmin() {
        String query = searchAdminField.getText();
        if (query.length() == 0) {
            findAllAdmin();
        } else {
            modelAdmin.setRowCount(0);
            try {
                List<User> users = userDao.search(searchAdminField.getText(),"admin");
                if(users!=null){
                    for (User cUser : users) {
                        Object[] row = {cUser.getId(), cUser.getFullName(), cUser.getEmail(), cUser.getPhone()};
                        modelAdmin.addRow(row);
                    }
                }
            } catch (SQLException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(null,ex);
            }
        }
    }
    
    private void resetForm() {
        firstNameField.setText("");
        middleNameField.setText("");
        lastNameField.setText("");
        emailField.setText("");
        phoneField.setText("");
        passField.setText("");

    }
    
    
    private void resetModuleForm() {
        moduleNameTextField.setText("");

    }
    
    private void setUpTableModel() {
        studentTeacherTable.setModel(model);
        model.setColumnIdentifiers(columns);
        
        adminTable.setModel(modelAdmin);
        modelAdmin.setColumnIdentifiers(columns);
        
        coursesTable.setModel(model1);
        model1.setColumnIdentifiers(coursesColumns);
        
        moduleTable.setModel(model2);
        model2.setColumnIdentifiers(modulesColumns);
        
        studentGradeTable.setModel(model3);
        model3.setColumnIdentifiers(studentGradeColumns);
        
        level4ResultTabel.setModel(model4);
        model4.setColumnIdentifiers(resultColumns);
        
        level5ResultTabel.setModel(model5);
        model5.setColumnIdentifiers(resultColumns);
        
        level6ResultTabel.setModel(model6);
        model6.setColumnIdentifiers(resultColumns);
    }
    
    private void homeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeButtonActionPerformed
        // TODO add your handling code here:
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(homePanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        try {
            setTotal();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            pickOptional();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_homeButtonActionPerformed

    private void userBio(){
        nameLabel.setText(user.getFullName());
        emailLabel.setText(user.getEmail());
        phoneLabel.setText(user.getPhone());
    }
    private void settingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingButtonActionPerformed
        // TODO add your handling code here:
        userBio();

        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(settingPanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        if(this.user.getType().equals("admin")){
            findAllAdmin();
        }
        
        
    }//GEN-LAST:event_settingButtonActionPerformed

    private void logoutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutButtonActionPerformed
        // TODO add your handling code here:
        setVisible(false);
        Login login = new Login();
        login.setVisible(true);
    }//GEN-LAST:event_logoutButtonActionPerformed

    private void studentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentButtonActionPerformed
        // TODO add your handling code here:
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(studentTeacherPanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        currentType = "student";
        addButton.setText("Add student");
        editOrUpdateButton.setText("Edit student");
        removeButton.setText("Remove student");
        studentTeacherTitle.setText("Student");
        findAll();
        updateCoursesComboBox();
        resetForm();
        selectCoursePanel.setVisible(true);

    }//GEN-LAST:event_studentButtonActionPerformed

    private void teacherButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_teacherButtonActionPerformed
        // TODO add your handling code here:
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(studentTeacherPanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        currentType = "teacher";
        addButton.setText("Add teacher");
        editOrUpdateButton.setText("Edit teacher");
        removeButton.setText("Remove teacher");
        studentTeacherTitle.setText("Teacher");
        findAll();
        updateCoursesComboBox();
        resetForm();
        selectCoursePanel.setVisible(false);
    }//GEN-LAST:event_teacherButtonActionPerformed

    private void courseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_courseButtonActionPerformed
        // TODO add your handling code here:
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(coursePanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        findAllCourses();
        findAllModules();
        updateCoursesComboBox();
        
    }//GEN-LAST:event_courseButtonActionPerformed

    
    private void updateCoursesComboBox(){
        coursesComboBox.removeAllItems();
        coursesComboBoxStudentTeacher.removeAllItems();
        try {
            List<Courses> courses = coursesDao.findAll();
            if(courses!=null){
            for (Courses course : courses) {
                coursesComboBox.addItem(course.getCourseName());
                coursesComboBoxStudentTeacher.addItem(course.getCourseName());
            }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(null,ex);
        }
    }
    
    private void newPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPasswordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newPasswordFieldActionPerformed

    private void changePasswordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePasswordButtonActionPerformed
        // TODO add your handling code here:
        changePass();
    }//GEN-LAST:event_changePasswordButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        save();
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        // TODO add your handling code here:
        remove();
    }//GEN-LAST:event_removeButtonActionPerformed

    private void editOrUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOrUpdateButtonActionPerformed
        // TODO add your handling code here:
        update();
    }//GEN-LAST:event_editOrUpdateButtonActionPerformed

    private void searchFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyReleased
        // TODO add your handling code here:
        search();
    }//GEN-LAST:event_searchFieldKeyReleased

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchFieldActionPerformed

    private void passFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passFieldActionPerformed

    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
        // TODO add your handling code here:
        saveCourse();
    }//GEN-LAST:event_addCourseButtonActionPerformed

    private void removeCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCourseButtonActionPerformed
        // TODO add your handling code here:
        removeCourse();
    }//GEN-LAST:event_removeCourseButtonActionPerformed

    private void coursesComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursesComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coursesComboBoxActionPerformed

    private void level4RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level4RadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_level4RadioButtonActionPerformed

    private void level5RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level5RadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_level5RadioButtonActionPerformed

    private void level6RadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_level6RadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_level6RadioButtonActionPerformed

    private void moduleNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduleNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moduleNameTextFieldActionPerformed

    private void addModuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addModuleButtonActionPerformed
        // TODO add your handling code here:
        saveModule();
    }//GEN-LAST:event_addModuleButtonActionPerformed

    private void editOrUpdateModuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOrUpdateModuleButtonActionPerformed
        try {
            // TODO add your handling code here:
            updateModule();
        } catch (NumberFormatException | SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_editOrUpdateModuleButtonActionPerformed

    private void deleteModuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteModuleButtonActionPerformed
        // TODO add your handling code here:
        removeModule();
    }//GEN-LAST:event_deleteModuleButtonActionPerformed

    private void moduleSearchTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_moduleSearchTextFieldKeyReleased
        // TODO add your handling code here:
        searchModule();
    }//GEN-LAST:event_moduleSearchTextFieldKeyReleased

    private void gradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeButtonActionPerformed
        // TODO add your handling code here:
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(gradePanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
        resetGradeForm();
        try {
            findAllGrade();
        } catch (SQLException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
//        try {
//            upgradeLevel();
//        } catch (SQLException ex) {
//            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_gradeButtonActionPerformed

    private void searchStudentGradeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchStudentGradeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_searchStudentGradeTextFieldActionPerformed

    private void editOrAddGradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editOrAddGradeButtonActionPerformed
        // TODO add your handling code here:
        updateGrade();
    }//GEN-LAST:event_editOrAddGradeButtonActionPerformed

    private void searchStudentGradeTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchStudentGradeTextFieldKeyReleased
        try {
            // TODO add your handling code here:
            searchGrade();
        } catch (SQLException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_searchStudentGradeTextFieldKeyReleased

    private void moduleSearchTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduleSearchTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_moduleSearchTextFieldActionPerformed

    private void gradeTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gradeTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gradeTextFieldActionPerformed

    private void resultButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resultButtonActionPerformed
        // TODO add your handling code here:
        showFeaturesPanel.removeAll();
        showFeaturesPanel.add(resultPanel);
        showFeaturesPanel.repaint();
        showFeaturesPanel.revalidate();
    }//GEN-LAST:event_resultButtonActionPerformed

    private void generateResultSlipButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateResultSlipButtonActionPerformed
        try {
            // TODO add your handling code here:
            showResult();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_generateResultSlipButtonActionPerformed

    private void coursesComboBoxStudentTeacherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursesComboBoxStudentTeacherActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_coursesComboBoxStudentTeacherActionPerformed

    private void deassignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deassignButtonActionPerformed
        try {
            // TODO add your handling code here:
            deassignModule();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deassignButtonActionPerformed

    private void assignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignButtonActionPerformed
        try {
            // TODO add your handling code here:
            assignModule();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_assignButtonActionPerformed

    private void submitOptionalAnsweActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitOptionalAnsweActionPerformed
        try {
            // TODO add your handling code here:

            updateOptional();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_submitOptionalAnsweActionPerformed

    private void adminFirstNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminFirstNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adminFirstNameTextFieldActionPerformed

    private void editAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAdminButtonActionPerformed
        // TODO add your handling code here:
        updateAdmin();
    }//GEN-LAST:event_editAdminButtonActionPerformed

    private void deleteAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAdminButtonActionPerformed
        // TODO add your handling code here:
        removeAdmin();
    }//GEN-LAST:event_deleteAdminButtonActionPerformed

    private void addAdminButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAdminButtonActionPerformed
        try {
            // TODO add your handling code here:
            addAdmin();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addAdminButtonActionPerformed

    private void adminPhoneTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminPhoneTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adminPhoneTextFieldActionPerformed

    private void searchAdminFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchAdminFieldKeyReleased
        // TODO add your handling code here:
        searchAdmin();
    }//GEN-LAST:event_searchAdminFieldKeyReleased

    private void optionalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionalButtonActionPerformed
        // TODO add your handling code here:
        if(optionalButton.isSelected()==true){
            chooseLevelPanel.setVisible(false);
        }else{
            chooseLevelPanel.setVisible(true);
        }
    }//GEN-LAST:event_optionalButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashboardAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new DashboardAdmin().setVisible(true);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(DashboardAdmin.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutMeLabel;
    private javax.swing.JButton addAdminButton;
    private javax.swing.JButton addButton;
    private javax.swing.JButton addCourseButton;
    private javax.swing.JButton addModuleButton;
    private javax.swing.JPanel adminEditPanel;
    private javax.swing.JTextField adminEmailTextField;
    private javax.swing.JTextField adminFirstNameTextField;
    private javax.swing.JTextField adminLastNameTextField;
    private javax.swing.JTextField adminMiddleNameTextField;
    private javax.swing.JTextField adminPassTextField;
    private javax.swing.JTextField adminPhoneTextField;
    private javax.swing.JTable adminTable;
    private javax.swing.JScrollPane adminTableT;
    private javax.swing.JButton assignButton;
    private javax.swing.JTextField assignDeassignTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton changePasswordButton;
    private javax.swing.JPanel chooseLevelPanel;
    private javax.swing.JPasswordField confirmNewPasswordField;
    private javax.swing.JButton courseButton;
    private javax.swing.JPanel coursePanel;
    private javax.swing.JTextField courseTextField;
    private javax.swing.JComboBox<String> coursesComboBox;
    private javax.swing.JComboBox<String> coursesComboBoxStudentTeacher;
    private javax.swing.JTable coursesTable;
    private javax.swing.JPasswordField currentPasswordField;
    private javax.swing.JButton deassignButton;
    private javax.swing.JButton deleteAdminButton;
    private javax.swing.JButton deleteModuleButton;
    private javax.swing.JButton editAdminButton;
    private javax.swing.JButton editOrAddGradeButton;
    private javax.swing.JButton editOrUpdateButton;
    private javax.swing.JButton editOrUpdateModuleButton;
    private javax.swing.JTextField emailField;
    private javax.swing.JLabel emailLabel;
    private javax.swing.JPanel featuresPanel;
    private javax.swing.JLabel finalVerditLevel4;
    private javax.swing.JLabel finalVerditLevel5;
    private javax.swing.JLabel finalVerditLevel6;
    private javax.swing.JTextField firstNameField;
    private javax.swing.JButton generateResultSlipButton;
    private javax.swing.JButton gradeButton;
    private javax.swing.JLabel gradeCourseId;
    private javax.swing.JLabel gradeCourseName;
    private javax.swing.JLabel gradeModuleId;
    private javax.swing.JLabel gradeModuleName;
    private javax.swing.JPanel gradePanel;
    private javax.swing.JLabel gradeStudentName;
    private javax.swing.JTextField gradeTextField;
    private javax.swing.JButton homeButton;
    private javax.swing.JPanel homePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel labelForConfirmNewPassword;
    private javax.swing.JLabel labelForCurrentPassword;
    private javax.swing.JLabel labelForEmail;
    private javax.swing.JLabel labelForName;
    private javax.swing.JLabel labelForNewPassword;
    private javax.swing.JLabel labelForPhone;
    private javax.swing.JTextField lastNameField;
    private javax.swing.JRadioButton level4RadioButton;
    private javax.swing.JTable level4ResultTabel;
    private javax.swing.JRadioButton level5RadioButton;
    private javax.swing.JTable level5ResultTabel;
    private javax.swing.JRadioButton level6RadioButton;
    private javax.swing.JTable level6ResultTabel;
    private javax.swing.JButton logoutButton;
    private javax.swing.JTextField middleNameField;
    private javax.swing.JTextField moduleNameTextField;
    private javax.swing.JTextField moduleSearchTextField;
    private javax.swing.JTable moduleTable;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JPasswordField newPasswordField;
    private javax.swing.JPanel onlyCoursePanel;
    private javax.swing.JPanel onlyModulePanel;
    private javax.swing.JComboBox<String> optModuleComboBox;
    private javax.swing.JToggleButton optionalButton;
    private javax.swing.JPanel optionalPanel;
    private javax.swing.JTextField passField;
    private javax.swing.JLabel passwordLabel;
    private javax.swing.JTextField phoneField;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton removeCourseButton;
    private javax.swing.JButton resultButton;
    private javax.swing.JLabel resultCourse;
    private javax.swing.JLabel resultEmail;
    private javax.swing.JLabel resultId;
    private javax.swing.JLabel resultName;
    private javax.swing.JPanel resultPanel;
    private javax.swing.JPanel resultShowPanel;
    private javax.swing.JTextField searchAdminField;
    private javax.swing.JTextField searchField;
    private javax.swing.JTextField searchForResultTextField;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField searchStudentGradeTextField;
    private javax.swing.JPanel selectCoursePanel;
    private javax.swing.JPanel selectFeaturesPanel;
    private javax.swing.JLabel selectedModuleName;
    private javax.swing.JButton settingButton;
    private javax.swing.JPanel settingPanel;
    private javax.swing.JPanel showFeaturesPanel;
    private javax.swing.JButton studentButton;
    private javax.swing.JTable studentGradeTable;
    private javax.swing.JPanel studentTeacherPanel;
    private javax.swing.JTable studentTeacherTable;
    private javax.swing.JLabel studentTeacherTitle;
    private javax.swing.JLabel studentTeacherTitle1;
    private javax.swing.JLabel studentTeacherTitle2;
    private javax.swing.JButton submitOptionalAnswe;
    private javax.swing.JScrollPane tablePanel;
    private javax.swing.JButton teacherButton;
    private javax.swing.JLabel totalCourseLabel;
    private javax.swing.JLabel totalModuleLabel;
    private javax.swing.JLabel totalStudentsLabel;
    private javax.swing.JLabel totalTeacherLabel;
    private javax.swing.JLabel welcomeMessage;
    // End of variables declaration//GEN-END:variables
}
